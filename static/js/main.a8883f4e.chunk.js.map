{"version":3,"sources":["level.ts","utils.ts","board.tsx","point.ts","field.ts","sampleLevel.ts","game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Tile","range","n","Array","fill","map","_","i","clone2dArray","xss","xs","MoveDirection","BLOCK_W","BLOCK_H","Color","BLANK","BRICK","BLOCK","LADDER","ROPE","EXIT","GOLD","CHARA","Board","props","canvasRef","useRef","useEffect","contex","current","getContext","clearRect","width","height","field","forEach","y","x","value","color","fillStyle","fillRect","strokeRect","drawBlock","cornerX","cornerY","drawChara","chara","ref","movePoint","p","d","getTile","setTile","mutableField","tile","isInRange","canWalkThrough","includes","isFalling","pointBelow","DOWN","data","sampleLevel","console","assert","length","parseInt","createModel","level","exit","Game","initialModel","useState","setField","setChara","queue","setQueue","setExit","setBeated","reflectChange","flatMap","row","filter","countGold","move","dir","Direction","UP","newPoint","newChara","newField","dig","target","isBreakable","newQueue","push","shift","tabIndex","onKeyDown","e","key","LEFT","RIGHT","reset","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8883f4e.chunk.js","sourcesContent":["import { range } from \"./utils\";\n\nexport enum Tile {\n  BLANK = 0,\n  BRICK = 1,\n  BLOCK = 2,\n  LADDER = 3,\n  ROPE = 4,\n  EXIT = 5,\n  GOLD = 6,\n  CHARA = 7,\n}\n\nexport interface Level {\n  field: Tile[][];\n  width: number;\n  height: number;\n}\n\nexport function readLevel(data: string, height: number, width: number): Level {\n  console.assert(data.length === width * height);\n  const field = range(height).map((y) =>\n    range(width).map((x) => parseInt(data[y * width + x]))\n  );\n  return { field, width, height };\n}\n","export function range(n: number): number[] {\n  return Array(n)\n    .fill(0)\n    .map((_, i) => i);\n}\n\nexport function clone2dArray<T>(xss: T[][]): T[][] {\n  return xss.map((xs) => [...xs]);\n}\n","import React, { useRef, useEffect } from \"react\";\nimport { Tile } from \"./level\";\nimport { Point } from \"./point\";\nimport { Field } from \"./field\";\nimport { range } from \"./utils\";\n\nconst BLOCK_W = 40;\nconst BLOCK_H = 40;\n\nconst Color = {\n  [Tile.BLANK]: \"\",\n  [Tile.BRICK]: \"DarkRed\",\n  [Tile.BLOCK]: \"DarkCyan\",\n  [Tile.LADDER]: \"GreenYellow\",\n  [Tile.ROPE]: \"Khaki\",\n  [Tile.EXIT]: \"Red\",\n  [Tile.GOLD]: \"Cyan\",\n  [Tile.CHARA]: \"\",\n};\n\ninterface BoardProps {\n  field: Field;\n  chara: Point;\n  width: number;\n  height: number;\n  style?: React.CSSProperties;\n}\n\nexport default function Board(props: BoardProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const contex = canvasRef.current!.getContext(\"2d\")!;\n    contex.clearRect(0, 0, props.width, props.height);\n\n    function drawBlock({ x, y }: Point, color: string) {\n      contex.fillStyle = color;\n      contex.fillRect(BLOCK_W * x, BLOCK_H * y, BLOCK_W, BLOCK_H);\n      contex.strokeRect(BLOCK_W * x, BLOCK_H * y, BLOCK_W, BLOCK_H);\n    }\n\n    function drawChara({ x, y }: Point) {\n      const cornerX = BLOCK_W * (x + 0.2);\n      const cornerY = BLOCK_H * (y + 0.2);\n      const width = BLOCK_W * 0.6;\n      const height = BLOCK_H * 0.6;\n\n      contex.fillStyle = \"pink\";\n      contex.fillRect(cornerX, cornerY, width, height);\n      contex.strokeRect(cornerX, cornerY, width, height);\n    }\n\n    range(props.field.height).forEach((y) => {\n      range(props.field.width).forEach((x) => {\n        if (props.field.value[y][x] !== Tile.BLANK) {\n          drawBlock({ x, y }, Color[props.field.value[y][x]]);\n        }\n      });\n    });\n    drawChara(props.chara);\n  }, [props]);\n  return <canvas ref={canvasRef} {...props} />;\n}\n","export interface Point {\n  x: number;\n  y: number;\n}\n\nexport enum MoveDirection {\n  RIGHT = 0,\n  DOWN = 1,\n  LEFT = 2,\n  UP = 3,\n}\n\nexport function movePoint(p: Point, d: MoveDirection): Point {\n  const dx = [1, 0, -1, 0];\n  const dy = [0, 1, 0, -1];\n  return { x: p.x + dx[d], y: p.y + dy[d] };\n}\n","import { Tile } from \"./level\";\nimport { Point, MoveDirection, movePoint } from \"./point\";\n\nexport interface Field {\n  value: Tile[][];\n  width: number;\n  height: number;\n}\n\nexport function getTile(field: Field, p: Point): Tile {\n  return field.value[p.y][p.x];\n}\n\nexport function setTile(mutableField: Field, p: Point, tile: Tile): void {\n  mutableField.value[p.y][p.x] = tile;\n}\n\nexport function isInRange(field: Field, p: Point): boolean {\n  return 0 <= p.x && p.x < field.width && 0 <= p.y && p.y < field.height;\n}\n\nexport function canWalkThrough(field: Field, p: Point): boolean {\n  return (\n    isInRange(field, p) && ![Tile.BRICK, Tile.BLOCK].includes(getTile(field, p))\n  );\n}\n\nexport function isDiggable(field: Field, p: Point): boolean {\n  return (\n    isInRange(field, p) &&\n    getTile(field, p) === Tile.BRICK &&\n    canWalkThrough(field, movePoint(p, MoveDirection.UP))\n  );\n}\n\nexport function isFalling(field: Field, p: Point) {\n  const pointBelow = movePoint(p, MoveDirection.DOWN);\n  return (\n    ![Tile.LADDER, Tile.ROPE].includes(getTile(field, p)) &&\n    canWalkThrough(field, pointBelow) &&\n    ![Tile.LADDER].includes(getTile(field, pointBelow))\n  );\n}\n\nexport function countGold(field: Field) {\n  const value = field.value;\n  return value.flatMap((row) => row.filter((x) => x === Tile.GOLD)).length;\n}\n","import { readLevel } from \"./level\";\n\nconst sampleLevelWidth = 12;\nconst sampleLevelHeight = 12;\nconst sampleLevelString =\n  \"000000000000\" +\n  \"000007000000\" +\n  \"000003500000\" +\n  \"000003100000\" +\n  \"000003100000\" +\n  \"000003100000\" +\n  \"000003130000\" +\n  \"000000130000\" +\n  \"000003130000\" +\n  \"000003100000\" +\n  \"000003130000\" +\n  \"000006130000\";\n\nexport const sampleLevel = readLevel(\n  sampleLevelString,\n  sampleLevelHeight,\n  sampleLevelWidth\n);\n","import React, { useState } from \"react\";\nimport Board from \"./board\";\nimport {\n  canWalkThrough,\n  countGold,\n  Field,\n  getTile,\n  isDiggable as isBreakable,\n  isFalling,\n  setTile,\n} from \"./field\";\nimport { Level, Tile } from \"./level\";\nimport { MoveDirection as Direction, movePoint, Point } from \"./point\";\nimport { sampleLevel } from \"./sampleLevel\";\nimport { clone2dArray, range } from \"./utils\";\n\nconst MAXQ = 5;\n\nfunction createModel(level: Level) {\n  const width = level.width;\n  const height = level.height;\n\n  let value: Tile[][] = clone2dArray(level.field);\n  let chara: Point = { x: 0, y: 0 };\n  let exit: Point = { x: 0, y: 0 };\n\n  range(height).forEach((y) => {\n    range(width).forEach((x) => {\n      switch (value[y][x]) {\n        case Tile.CHARA:\n          value[y][x] = Tile.BLANK;\n          chara = { x, y };\n          break;\n        case Tile.EXIT:\n          value[y][x] = Tile.BRICK;\n          exit = { x, y };\n          break;\n      }\n    });\n  });\n\n  const field: Field = { value, width, height };\n  return { field, chara, exit };\n}\n\nexport default function Game(props: { width: number; height: number }) {\n  const initialModel = createModel(sampleLevel);\n\n  const [field, setField] = useState<Field>(initialModel.field);\n  const [chara, setChara] = useState<Point>(initialModel.chara);\n  const [queue, setQueue] = useState<Point[]>([]);\n  const [exit, setExit] = useState<Point>(initialModel.exit);\n  const [beated, setBeated] = useState<boolean>(false);\n\n  function onKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    switch (e.key) {\n      case \"ArrowDown\":\n        move(Direction.DOWN);\n        break;\n      case \"ArrowLeft\":\n        move(Direction.LEFT);\n        break;\n      case \"ArrowRight\":\n        move(Direction.RIGHT);\n        break;\n      case \"ArrowUp\":\n        move(Direction.UP);\n        break;\n      case \"z\":\n        dig(Direction.LEFT);\n        break;\n      case \"x\":\n        dig(Direction.RIGHT);\n        break;\n      case \"r\":\n        reset(sampleLevel);\n        break;\n    }\n  }\n\n  function reset(level: Level): void {\n    const { field, chara, exit } = createModel(level);\n    setField(field);\n    setChara(chara);\n    setQueue([]);\n    setExit(exit);\n    setBeated(false);\n  }\n\n  function reflectChange(mutableField: Field, chara: Point, exit: Point): void {\n    if (getTile(mutableField, chara) === Tile.GOLD) {\n      setTile(mutableField, chara, Tile.BLANK);\n    }\n    if (getTile(mutableField, chara) === Tile.EXIT) {\n      setBeated(true);\n    }\n    if (countGold(mutableField) === 0) {\n      setTile(mutableField, exit, Tile.EXIT);\n    }\n  }\n\n  function move(dir: Direction): void {\n    if (dir === Direction.UP && getTile(field, chara) !== Tile.LADDER) {\n      return;\n    }\n    const newPoint = movePoint(chara, dir);\n    if (!canWalkThrough(field, newPoint)) {\n      return;\n    }\n\n    let newChara = { ...newPoint };\n    let newField = { ...field, value: clone2dArray(field.value) };\n    reflectChange(newField, newChara, exit);\n    while (isFalling(newField, newChara)) {\n      newChara = movePoint(newChara, Direction.DOWN);\n      reflectChange(newField, newChara, exit);\n    }\n    setChara(newChara);\n    setField(newField);\n  }\n\n  function dig(dir: Direction.LEFT | Direction.RIGHT): void {\n    const target = movePoint(movePoint(chara, Direction.DOWN), dir);\n    if (!isBreakable(field, target)) {\n      return;\n    }\n    let newField = { ...field, value: clone2dArray(field.value) };\n    let newQueue = [...queue];\n    setTile(newField, target, Tile.BLANK);\n    newQueue.push(target);\n    if (newQueue.length > MAXQ) {\n      const popped = newQueue.shift()!;\n      setTile(newField, popped, Tile.BRICK);\n    }\n    setField(newField);\n    setQueue(newQueue);\n  }\n\n  return (\n    <div tabIndex={0} onKeyDown={onKeyDown}>\n      <Board\n        field={field}\n        chara={chara}\n        width={props.width}\n        height={props.height}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Game from \"./game\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game width={480} height={480} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}